"Questions": [
  {
	"id": "0",
	"category": "Fundamentals",
	"question": "What does the forEach() method return?",
	"answers": [
		"undefined",
		"an array of the same length with all elements modified",
		"the original array with its elements modified"
	],
	"correct_answer": "undefined",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
}, {
	"id": "1",
	"category": "Fundamentals",
	"question": "Which array proptotype methods return a representation of an array, but do not modify it?",
	"answers": [
		"Accessor methods",
		"Mutator methods",
		"Iteration methods"
	],
	"correct_answer": "Accessor methods",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Accessor_methods"
}, {
	"id": "2",
	"category": "Fundamentals",
	"question": "Which method returns a single value?",
	"answers": [
		".return()",
		".reduce()",
		".filter()"
	],
	"correct_answer": ".reduce()",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"
}, {
	"id": "3",
	"category": "Fundamentals",
	"question": "Which method creates a new array with all elements that match the provided condition?",
	"answers": [
		".find()",
		".includes()",
		".filter()"
	],
	"correct_answer": ".filter()",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"
}, {
	"id": "4",
	"category": "Fundamentals",
	"question": "What does the sort() method return?",
	"answers": [
		"A new array with the elements of the previous array sorted",
		"The sorted array. No copy is made.",
		"The sorted array and copy of the original array."
	],
	"correct_answer": "The sorted array. No copy is made.",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
}, {
	"id": "5",
	"category": "Fundamentals",
	"question": "What does Object.keys() return?",
	"answers": [
		"An array of all the keys for that object.",
		"A console.log of all the keys for that object.",
		"A list of all the property names stored in a different object."
	],
	"correct_answer": "An array of all the keys for that object.",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"
}, {
	"id": "6",
	"category": "Fundamentals",
	"question": "What method is used to make an independent copy of an object or merge multiple objects together?",
	"answers": [
		"Object.values()",
		"Object.assign()",
		"Object.new()"
	],
	"correct_answer": "Object.assign()",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
}, {
	"id": "7",
	"category": "Fundamentals",
	"question": "What is a potential use case for Object.keys()?",
	"answers": [
		"Iterating over each key/value pair of an object.",
		"Making a fresh copy of an object.",
		"Removing all the keys from that object."
	],
	"correct_answer": "Iterating over each key/value pair of an object.",
	"resources": "https://medium.com/front-end-weekly/es6-map-vs-object-what-and-when-b80621932373"
}, {
	"id": "8",
	"category": "Fundamentals",
	"question": "Which method allows us to add new elements to an array, but does not mutate the original array?",
	"answers": [
		"concat()",
		"push()",
		"unshift()"
	],
	"correct_answer": "concat()",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"
}, {
	"id": "9",
	"category": "Practice",
	"question": "Choose the code snippet that will combine the elements in this array: const words = ['Today', 'is', 'going', 'great!'] and returns this sentence: 'Today is going great!'",
	"answers": [
		"words.join()",
		"words.concat()",
		"words.join(' ')"
	],
	"correct_answer": "words.join(' ')",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join"
}, {
	"id": "10",
	"category": "Practice",
	"question": "Choose the code snippet that will return the string 'cat' from const colors = ['cat', 'dog', 'cow']",
	"answers": [
		"colors.pop()",
		"colors.shift()",
		"colors.remove(0)"
	],
	"correct_answer": "colors.shift()",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift"
}, {
	"id": "11",
	"category": "Practice",
	"question": "If we had an array of names and wanted to know if that array contained the name 'George', which method will determine that and return a value of true or false?",
	"answers": [
		"names.has('George')",
		"names.includes('George')",
		"names.indexOf('George')"
	],
	"correct_answer": "names.includes('George')",
	"resources": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"
},
// !! ========================================================================================================================
// !! ========================================================================================================================
//                                          ____                       __     ____    ____
// !! ============================         /               ||        //  \\  //     //       =================================
// !! ============================        |        |   | ======      ||  ||  ===    ===     =================================
// !! ============================         \____    \_/    ||        \\__//  ||     ||      =================================

// !! ========================================================================================================================
// !! ========================================================================================================================
{
	"id": "12",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"undefined",
		"an array of the same length with all elements modified",
		"the original array with its elements modified"
	],
	"correct_answer": "undefined",
	"resources": ""
}, {
	"id": "13",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"Accessor methods",
		"Mutator methods",
		"Iteration methods"
	],
	"correct_answer": "Accessor methods",
	"resources": ""
}, {
	"id": "14",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		".return()",
		".reduce()",
		".filter()"
	],
	"correct_answer": ".reduce()",
	"resources": ""
}, {
	"id": "15",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		".find()",
		".includes()",
		".filter()"
	],
	"correct_answer": ".filter()",
	"resources": ""
}, {
	"id": "16",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"colors.pop()",
		"colors.shift()",
		"colors.remove(0)"
	],
	"correct_answer": "colors.shift()",
	"resources": ""
}, {
	"id": "17",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"A new array with the elements of the previous array sorted",
		"The sorted array. No copy is made.",
		"The sorted array and copy of the original array."
	],
	"correct_answer": "The sorted array. No copy is made.",
	"resources": ""
}, {
	"id": "18",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"words.join()",
		"words.concat()",
		"words.join(' ')"
	],
	"correct_answer": "words.join(' ')",
	"resources": ""
}, {
	"id": "19",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"An array of all the keys for that object.",
		"A console.log of all the keys for that object.",
		"A list of all the property names stored in a different object."
	],
	"correct_answer": "An array of all the keys for that object.",
	"resources": ""
}, {
	"id": "20",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"Object.values()",
		"Object.assign()",
		"Object.new()"
	],
	"correct_answer": "Object.assign()",
	"resources": ""
}, {
	"id": "21",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"Iterating over each key/value pair of an object.",
		"Making a fresh copy of an object.",
		"Removing all the keys from that object."
	],
	"correct_answer": "Iterating over each key/value pair of an object.",
	"resources": ""
}, {
	"id": "22",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"concat()",
		"push()",
		"unshift()"
	],
	"correct_answer": "concat()",
	"resources": ""
}, {
	"id": "23",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"names.has('George')",
		"names.includes('George')",
		"names.indexOf('George')"
	],
	"correct_answer": "names.includes('George')",
	"resources": ""
}, {
	"id": "24",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"A new array with the elements of the previous array sorted",
		"The sorted array. No copy is made.",
		"The sorted array and copy of the original array."
	],
	"correct_answer": "The sorted array. No copy is made.",
	"resources": ""
}, {
	"id": "25",
	"category": "Prototype methods",
	"question": "",
	"answers": [
		"words.join()",
		"words.concat()",
		"words.join(' ')"
	],
	"correct_answer": "words.join(' ')",
	"resources": ""
}, {
	"id": "26",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"An array of all the keys for that object.",
		"A console.log of all the keys for that object.",
		"A list of all the property names stored in a different object."
	],
	"correct_answer": "An array of all the keys for that object.",
	"resources": ""
}, {
	"id": "27",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"Object.values()",
		"Object.assign()",
		"Object.new()"
	],
	"correct_answer": "Object.assign()",
	"resources": ""
}, {
	"id": "28",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"Iterating over each key/value pair of an object.",
		"Making a fresh copy of an object.",
		"Removing all the keys from that object."
	],
	"correct_answer": "Iterating over each key/value pair of an object.",
	"resources": ""
}, {
	"id": "29",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"concat()",
		"push()",
		"unshift()"
	],
	"correct_answer": "concat()",
	"resources": ""
}, {
	"id": "30",
	"category": "Prototype Methods",
	"question": "",
	"answers": [
		"names.has('George')",
		"names.includes('George')",
		"names.indexOf('George')"
	],
	"correct_answer": "names.includes('George')",
	"resources": ""
}